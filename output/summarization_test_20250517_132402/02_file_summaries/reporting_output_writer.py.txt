1. **Overall Purpose and Role:**
   - The primary purpose of this file is to handle the writing of Potential Future Exposure (PFE) results to output files.
   - It plays a role in the reporting and output generation component of a broader system or model related to risk analysis or portfolio simulations.

2. **Key Components and Functionality:**
   - **Class: ResultsWriter**
     - **Purpose:** Manages the creation of an output directory and the writing of PFE results to a JSON file.
     - **Key Operations:**
       - Initializes the output directory and handles directory creation.
       - Converts NumPy arrays to lists for JSON serialization.
       - Writes aggregated and individual PFE profiles to a JSON file.
     - **Inputs:**
       - `output_directory` (str): Path to the output directory.
       - `simulation_id` (str): Identifier for the simulation run.
       - `aggregated_pfe_profile` (np.ndarray or None): The aggregated PFE profile.
       - `individual_pfe_profiles` (dict): Dictionary where keys are trade IDs, and values are PFE profiles (np.ndarray).
     - **Outputs:** A JSON file containing the PFE results, written to the specified output directory.

3. **Core Algorithms and Logic:**
   - The `_prepare_data_for_json` method recursively converts NumPy arrays and nested data structures (dictionaries and lists) to Python lists, enabling JSON serialization.
   - The `write_pfe_results` method constructs a dictionary containing the simulation ID, aggregated PFE profile, and individual trade PFE profiles, and writes it to a JSON file in the output directory.

4. **Data Structures:**
   - NumPy arrays are used to represent PFE profiles (aggregated and individual).
   - A dictionary is used to store individual trade PFE profiles, where the keys are trade IDs, and the values are NumPy arrays representing the PFE profiles.

5. **Dependencies:**
   - **Internal:** None.
   - **External:**
     - `json`: Standard Python library for working with JSON data.
     - `os`: Standard Python library for interacting with the operating system, used for creating directories.
     - `numpy`: Third-party library for numerical computing, used for representing and manipulating PFE profiles as arrays.

6. **Error Handling and Logging:**
   - The `__init__` method catches `OSError` exceptions when creating the output directory and raises a `RuntimeError` with an informative message.
   - The `write_pfe_results` method catches `IOError` exceptions when writing to the output file and raises a `RuntimeError` with an informative message.
   - The `write_pfe_results` method catches `TypeError` exceptions when serializing data to JSON and raises a `RuntimeError` with an informative message.
   - The file uses `print` statements to log informational messages about the output directory and successful file writing.

7. **Assumptions and Limitations (File-Specific):**
   - The file assumes that the input PFE profiles are represented as NumPy arrays or dictionaries containing NumPy arrays.
   - The file assumes that the output directory path is valid and accessible for writing.
   - The file does not handle any potential race conditions or concurrent access to the output directory or files.
   - The file does not provide any functionality for appending to or updating existing output files; it overwrites the file with new data on each run.